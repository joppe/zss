//-----------------------------------------------------------------------------\\
// #HELPERS grid
//-----------------------------------------------------------------------------//

@import '../helpers/clear';
@import '../helpers/responsive';



@mixin create-grid($gutter, $grid-type, $no-flex: $zss-grid--no-flex) {
    @if $grid-type == float {
        @include clear;
    } @else if $grid-type == flex-with-fallback {
        .#{$no-flex} & {
            @include clear;
        }
    }

    margin-right: auto;
    margin-left: auto;
    padding-right: $gutter / 2;
    padding-left: $gutter / 2;
}



@mixin create-grid-widths($max-widths: $zss-grid--max-widths, $screens: $zss-screens) {
    @each $screen-name, $screen-size in $screens {
        @include media-from($screen-name, $screens) {
            max-width: map-get($max-widths, $screen-name);
        }
    }
}



@mixin create-grid-row($gutter, $grid-type, $no-flex: $zss-grid--no-flex, $flex: $zss-grid--flex) {
    @if $grid-type == flex {
        display: flex;
        flex-wrap: wrap;
    } @else if $grid-type == float {
        @include clear();
    } @else if $grid-type == flex-with-fallback {
        .#{$no-flex} & {
            @include clear;
        }

        .#{$flex} & {
            display: flex;
            flex-wrap: wrap;
        }
    }

    margin-right: $gutter / -2;
    margin-left: $gutter / -2;
}



@mixin create-grid-column($gutter, $grid-type, $no-flex: $zss-grid--no-flex) {
    @if $grid-type == float {
        float: left;
    } @else if $grid-type == flex-with-fallback {
        .#{$no-flex} & {
            float: left;
        }
    }

    position: relative;
    min-height: 1px;
    padding-right: $gutter / 2;
    padding-left: $gutter / 2;
}



//
// 1. According to the flexbox specification, by default, flex items won't shrink below their minimum
//    content size (the length of the longest word or fixed-size element). To change this, set the
//    max-width or max-height property.
//    NOTE: if we leave the max-width, the 'columns' in separate rows don't have the same width.
//
@mixin create-grid-column-sizes($column-count, $grid-type, $screens: $zss-screens, $no-flex: $zss-grid--no-flex, $flex: $zss-grid--flex) {
    @each $screen-name, $screen-size in $screens {
        @include media-from($screen-name, $screens) {

            @for $index from 1 through $column-count {
                @at-root {
                    #{&}--#{$index}\@#{$screen-name} {
                        @if $grid-type == flex {
                            flex: 0 0 percentage($index / $column-count);
                            max-width: percentage($index / $column-count); // [1]
                        } @else if $grid-type == float {
                            width: percentage($index / $column-count);
                        } @else if $grid-type == flex-with-fallback {
                            .#{$no-flex} & {
                                width: percentage($index / $column-count);
                            }

                            .#{$flex} & {
                                flex: 0 0 percentage($index / $column-count);
                                max-width: percentage($index / $column-count); // [1]
                            }
                        }

                    }
                }
            }

        }
    }
}
