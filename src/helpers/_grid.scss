
@import "../helpers/clear";
@import "../helpers/responsive";



@mixin create-grid($gutter, $grid-type) {
    @if $grid-type == float {
        @include clear;
    }

    margin-right: auto;
    margin-left: auto;
    padding-right: $gutter / 2;
    padding-left: $gutter / 2;
}



@mixin create-grid-widths($max-widths: $zss--grid-max-widths, $breakpoints: $zss--breakpoints) {
    @each $breakpoint-name, $breakpoint-size in $breakpoints {
        @include media-from($breakpoint-name, $breakpoints) {
            max-width: map-get($max-widths, $breakpoint-name);
        }
    }
}



@mixin create-grid-row($gutter, $grid-type) {
    @if $grid-type == flex {
        display: flex;
        flex-wrap: wrap;
    } @else if $grid-type == float {
        @include clear;
    }

    margin-right: $gutter / -2;
    margin-left: $gutter / -2;
}



@mixin create-grid-column($gutter, $grid-type) {
    @if $grid-type == float {
        float: left;
    }

    position: relative;
    min-height: 1px;
    padding-right: $gutter / 2;
    padding-left: $gutter / 2;
}



//
// 1. According to the flexbox specification, by default, flex items won't shrink below
//    their minimum content size (the length of the longest word or fixed-size element).
//    To change this, set the max-width or max-height property.
//    NOTE: if we remove the max-width, the 'columns' in separate rows don't have the same width.
//
@mixin create-grid-column-sizes($column-count, $grid-type, $breakpoints: $zss--breakpoints) {
    @each $breakpoint-name, $breakpoint-size in $breakpoints {
        @include media-from($breakpoint-name, $breakpoints) {
            @for $index from 1 through $column-count {
                @at-root {
                    #{&}--#{$index}\@#{$breakpoint-name} {
                        @if $grid-type == flex {
                            flex: 0 0 percentage($index / $column-count);
                            max-width: percentage($index / $column-count); // [1]
                        } @else if $grid-type == float {
                            width: percentage($index / $column-count);
                        }
                    }
                }
            }
        }
    }
}



@mixin create-grid-offset($column-count: $zss--grid-columns, $breakpoints: $zss--breakpoints) {
    @each $breakpoint, $size in $breakpoints {
        @include media-from($breakpoint, $breakpoints) {
            @for $index from 0 through $column-count - 1 {
                @at-root {
                    @if $size > 0 or $index > 0 {
                        #{&}--#{$index}\@#{$breakpoint} {
                            margin-left: percentage($index / $column-count);
                        }
                    }
                }
            }
        }
    }
}
